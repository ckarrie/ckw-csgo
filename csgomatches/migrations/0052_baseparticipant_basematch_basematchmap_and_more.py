# Generated by Django 5.1.1 on 2025-04-18 19:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('csgomatches', '0051_alter_matchmap_map_nr'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Participant Name (Lineup / Ingame Name)')),
                ('game', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='csgomatches.game')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Participant',
                'verbose_name_plural': 'Participants',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BaseMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, help_text='A unique identifier for the match.', max_length=255, unique=True, verbose_name='Match Slug')),
                ('starting_at', models.DateTimeField(help_text='The time when the match starts.', verbose_name='Match Start Time')),
                ('match_type', models.CharField(choices=[('bo1', 'Best of 1'), ('bo3', 'Best of 3'), ('bo5', 'Best of 5'), ('bo7', 'Best of 7')], max_length=60, verbose_name='Match Type')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
                'ordering': ['-starting_at'],
            },
        ),
        migrations.CreateModel(
            name='BaseMatchMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_number', models.PositiveSmallIntegerField(verbose_name='Map Number')),
                ('starting_at', models.DateTimeField(help_text='The time when the map starts.', verbose_name='Map Start Time')),
            ],
            options={
                'verbose_name': 'Match Map',
                'verbose_name_plural': 'Match Maps',
                'ordering': ['map_number'],
            },
        ),
        migrations.CreateModel(
            name='BaseWinCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=255)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Win Condition',
                'verbose_name_plural': 'Win Conditions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('name_long', models.CharField(blank=True, max_length=255, null=True)),
                ('logo_url', models.URLField(blank=True, null=True)),
                ('slug', models.SlugField()),
            ],
        ),
        migrations.AlterField(
            model_name="map",
            name="cs_name",
            field=models.CharField(blank=True, default='de_', max_length=255, null=True),
        ),
        migrations.RenameField(
            model_name="map",
            old_name="cs_name",
            new_name="ingame_name",
        ),
        migrations.CreateModel(
            name='BaseLineup',
            fields=[
                ('baseparticipant_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baseparticipant')),
            ],
            options={
                'verbose_name': 'Lineup',
                'verbose_name_plural': 'Lineups',
                'ordering': ['name'],
            },
            bases=('csgomatches.baseparticipant',),
        ),
        migrations.CreateModel(
            name='BasePlayer',
            fields=[
                ('baseparticipant_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baseparticipant')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('lineup', models.ForeignKey(blank=True, help_text='The lineup this player belongs to. Can be null if the player is not part of a lineup.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='csgomatches.baselineup')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['name'],
            },
            bases=('csgomatches.baseparticipant',),
        ),
        migrations.CreateModel(
            name='BaseOneOnOneMatch',
            fields=[
                ('basematch_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.basematch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('csgomatches.basematch',),
        ),
        migrations.CreateModel(
            name='OneOnOneMatchMap',
            fields=[
                ('basematchmap_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.basematchmap')),
                ('score_participant_1', models.PositiveSmallIntegerField(default=0, verbose_name='Score Participant 1')),
                ('score_participant_2', models.PositiveSmallIntegerField(default=0, verbose_name='Score Participant 2')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('csgomatches.basematchmap',),
        ),
        migrations.AddField(
            model_name='basematchmap',
            name='map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maps', to='csgomatches.map'),
        ),
        migrations.AddField(
            model_name='basematchmap',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='csgomatches.basematch'),
        ),
        migrations.AddField(
            model_name='basematchmap',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='BestOfWinCondition',
            fields=[
                ('basewincondition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.basewincondition')),
                ('best_of_number', models.PositiveSmallIntegerField(blank=True, default=24, help_text='Best of X, i.e. 24 for CS2 matches', verbose_name='Best of X')),
                ('has_overtime', models.BooleanField(default=False, help_text='Does the match have overtime? False will enable a draw as a result.')),
                ('has_draw', models.BooleanField(default=False, help_text='Does the match have a draw?')),
                ('best_of_number_overtime', models.PositiveSmallIntegerField(blank=True, help_text='Best of X for overtime, i.e. 6 for CS2 matches', null=True, verbose_name='Best of X for overtime')),
                ('win_by', models.PositiveSmallIntegerField(default=2, help_text='Winning condition: the participant must lead by at least this many points.', verbose_name='Win by')),
            ],
            options={
                'verbose_name': 'Win Condition',
                'verbose_name_plural': 'Win Conditions',
                'ordering': ['name'],
            },
            bases=('csgomatches.basewincondition',),
        ),
        migrations.AddField(
            model_name='basematch',
            name='win_condition_map',
            field=models.ForeignKey(help_text='The win condition for each map of the match.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ses', to='csgomatches.basewincondition', verbose_name='Map Win Condition'),
        ),
        migrations.AddField(
            model_name='baseparticipant',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='csgomatches.organization'),
        ),
        migrations.CreateModel(
            name='CsLineup',
            fields=[
                ('baselineup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baselineup')),
            ],
            options={
                'verbose_name': 'CS Lineup',
                'verbose_name_plural': 'CS Lineups',
            },
            bases=('csgomatches.baselineup',),
        ),
        migrations.CreateModel(
            name='TrackManiaLineup',
            fields=[
                ('baselineup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baselineup')),
            ],
            options={
                'verbose_name': 'TrackMania Lineup',
                'verbose_name_plural': 'TrackMania Lineups',
            },
            bases=('csgomatches.baselineup',),
        ),
        migrations.CreateModel(
            name='CsPlayer',
            fields=[
                ('baseplayer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baseplayer')),
            ],
            options={
                'verbose_name': 'CS Player',
                'verbose_name_plural': 'CS Players',
            },
            bases=('csgomatches.baseplayer',),
        ),
        migrations.CreateModel(
            name='TrackManiaPlayer',
            fields=[
                ('baseplayer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baseplayer')),
            ],
            options={
                'verbose_name': 'TrackMania Player',
                'verbose_name_plural': 'TrackMania Players',
            },
            bases=('csgomatches.baseplayer',),
        ),
        migrations.CreateModel(
            name='CsMatch',
            fields=[
                ('baseoneononematch_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='csgomatches.baseoneononematch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('csgomatches.baseoneononematch',),
        ),
        migrations.AddField(
            model_name='baseoneononematch',
            name='participant_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='one_on_one_matches_p1', to='csgomatches.baseparticipant'),
        ),
        migrations.AddField(
            model_name='baseoneononematch',
            name='participant_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='one_on_one_matches_p2', to='csgomatches.baseparticipant'),
        ),
    ]
